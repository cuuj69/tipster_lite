Set up your development environment: Install the necessary tools such as Node.js, React, Redux, TypeScript, PostgreSQL, Redis, Kafka, Prometheus, Grafana, and any other dependencies you may need for your project.

Design the app's architecture: Determine how the app will be structured and the technologies that you'll use. This includes selecting the database, APIs, and tools you'll use.

Create a database: Use PostgreSQL to create a database to store match details, team stats, and other data required for the prediction engine.

Start building the core algorithm: Begin by creating a function that calculates the number of goals accrued in recent head-to-head games between two teams. Test your function to ensure it works correctly.

Integrate with the SofaScore API: Use the API to fetch upcoming matches and their details such as home/away teams, previous matches, and other match details.

Set up Kafka: Use Kafka to manage real-time data streaming between different parts of the application.

Build the prediction engine: Using the data you have collected from the API and other sources, build a prediction engine that can predict the number of goals to be scored in a match and which team is likely to score at least one goal.

Implement other match determining factors: Once the core prediction algorithm is working, you can add other factors such as weather conditions, team lineup, league table stats, and reviews from top-rated tipsters to fine-tune the prediction.

Use Amazon S3: Use Amazon S3 to store static files such as images and other media.

Set up the backend: Build a GraphQL API using TypeScript to handle requests from the frontend and fetch data from the database.

Set up Nginx as a reverse proxy server: Use Nginx to handle incoming requests and distribute them to the backend servers to improve performance and security.

Set up a testing environment: Use testing frameworks such as Jest to test your application's functionality.

Use Prometheus: Use Prometheus to monitor the performance of the application and the server.

Use Grafana: Use Grafana to visualize the performance metrics collected by Prometheus.

Build the frontend: Using React and Redux, create a simple and minimalistic UI that allows users to input match details and view the predicted outcomes.

Implement CI/CD: Use Jenkins and GitHub Actions to set up continuous integration and continuous deployment, respectively. Use Docker and Kubernetes to deploy your application.

Add an AWS free service to the project, such as Amazon S3 for storing static files, or Amazon DynamoDB for a NoSQL database.

Additional senior backend concepts: Some additional concepts you may want to consider adding to your project include load balancing, serverless architecture, caching, and security protocols such as OAuth and JWT.